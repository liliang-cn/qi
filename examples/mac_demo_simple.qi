// Qi语言macOS演示程序 - 简化版
// macOS Demo Program for Qi Language - Simplified Version

// 主程序入口
// Main program entry
函数 主函数() {
    打印 "=== Qi语言macOS演示程序 ===";
    打印 "Welcome to Qi Language macOS Demo";
    打印 "";

    // 基础功能演示
    // Basic functionality demo
    基础功能演示();

    打印 "";
    打印 "=== 程序执行完成 ===";
}

// 基础功能演示函数
// Basic functionality demo function
函数 基础功能演示() {
    打印 "🔧 基础功能演示:";

    // 变量声明
    // Variable declarations
    变量 message: 字符串 = "你好，macOS世界！";
    变量 number: 整数 = 2024;
    变量 pi: 浮点数 = 3.14159;
    变量 is_running: 布尔 = 真;

    打印 "  消息: " + message;
    打印 "  年份: " + number;
    打印 "  圆周率: " + pi;

    如果 (is_running) {
        打印 "  运行状态: 运行中";
    } 否则 {
        打印 "  运行状态: 已停止";
    }

    // 数学运算
    // Mathematical operations
    变量 result = 计算斐波那契(10);
    打印 "  斐波那契(10) = " + result;

    变量 factorial_result = 阶乘(6);
    打印 "  阶乘(6) = " + factorial_result;

    // 数组操作
    // Array operations
    变量 numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    变量 sum = 数组求和(numbers);
    打印 "  数组 [1-10] 求和: " + sum;
    变量 max_value = 数组最大值(numbers);
    打印 "  数组最大值: " + max_value;
}

// 斐波那契数列计算
// Fibonacci sequence calculation
函数 计算斐波那契(n: 整数): 整数 {
    如果 (n <= 1) {
        返回 n;
    } 否则 {
        返回 计算斐波那契(n - 1) + 计算斐波那契(n - 2);
    }
}

// 阶乘计算
// Factorial calculation
函数 阶乘(n: 整数): 整数 {
    如果 (n <= 1) {
        返回 1;
    } 否则 {
        返回 n * 阶乘(n - 1);
    }
}

// 数组求和
// Array sum
函数 数组求和(arr: [整数]): 整数 {
    变量 sum = 0;
    变量 i = 0;

    当 (i < arr.长度) {
        sum = sum + arr[i];
        i = i + 1;
    }

    返回 sum;
}

// 数组最大值
// Array maximum value
函数 数组最大值(arr: [整数]): 整数 {
    如果 (arr.长度 == 0) {
        返回 0;
    }

    变量 max = arr[0];
    变量 i = 1;

    当 (i < arr.长度) {
        如果 (arr[i] > max) {
            max = arr[i];
        }
        i = i + 1;
    }

    返回 max;
}

// 程序入口点
// Program entry point
主函数();