// Qi Language - Function Examples
// Qi语言函数示例

// ===== Basic Function Examples | 基础函数示例 =====

// Simple function without parameters or return value
// 简单函数：无参数无返回值
函数 打印问候() {
    打印 "你好，世界！";
    打印 "这是一个简单的函数示例。";
}

// Function with parameters and return value
// 带参数和返回值的函数
函数 计算和(a: 整数, b: 整数): 整数 {
    变量 result = a + b;
    返回 result;
}

// Function with different parameter types
// 不同参数类型的函数
函数 创建个人信息(name: 字符串, age: 整数, is_student: 布尔): 字符串 {
    变量 info = name + " 年龄 " + 转字符串(age) + " 岁";
    如果 (is_student) {
        info = info + "，是一名学生";
    } 否则 {
        info = info + "，不是学生";
    }
    返回 info;
}

// Function without explicit return type (void)
// 无显式返回类型的函数
函数 显示结果(message: 字符串) {
    打印 "结果: " + message;
    // 函数结束时自动返回空值
}

// ===== Mathematical Functions | 数学函数示例 =====

// Factorial function with recursion
// 递归阶乘函数
函数 阶乘(n: 整数): 整数 {
    如果 (n <= 1) {
        返回 1;
    } 否则 {
        返回 n * 阶乘(n - 1);
    }
}

// Power function
// 幂函数
函数 幂(base: 整数, exponent: 整数): 整数 {
    变量 result = 1;
    变量 i = 0;
    当 (i < exponent) {
        result = result * base;
        i = i + 1;
    }
    返回 result;
}

// Absolute value function
// 绝对值函数
函数 绝对值(x: 整数): 整数 {
    如果 (x < 0) {
        返回 -x;
    } 否则 {
        返回 x;
    }
}

// Maximum of two numbers
// 两个数的最大值
函数 最大值(a: 整数, b: 整数): 整数 {
    如果 (a > b) {
        返回 a;
    } 否则 {
        返回 b;
    }
}

// ===== String Functions | 字符串函数示例 =====

// String length function
// 字符串长度函数
函数 字符串长度(s: 字符串): 整数 {
    变量 length = 0;
    对于 (字符 in s) {
        length = length + 1;
    }
    返回 length;
}

// String reverse function
// 字符串反转函数
函数 反转字符串(s: 字符串): 字符串 {
    变量 result = "";
    变量 i = 字符串长度(s) - 1;
    当 (i >= 0) {
        result = result + s[i];
        i = i - 1;
    }
    返回 result;
}

// Check if string contains substring
// 检查字符串是否包含子串
函数 包含子串(text: 字符串, substring: 字符串): 布尔 {
    // 简化实现
    变量 text_len = 字符串长度(text);
    变量 sub_len = 字符串长度(substring);

    变量 i = 0;
    当 (i <= text_len - sub_len) {
        变量 j = 0;
        变量 found = 真;
        当 (j < sub_len) {
            如果 (text[i + j] != substring[j]) {
                found = 假;
                跳出循环;
            }
            j = j + 1;
        }
        如果 (found) {
            返回 真;
        }
        i = i + 1;
    }
    返回 假;
}

// ===== Array Functions | 数组函数示例 =====

// Find maximum value in array
// 查找数组中的最大值
函数 数组最大值(arr: [整数]): 整数 {
    如果 (arr.长度 == 0) {
        返回 0; // 错误情况
    }

    变量 max = arr[0];
    变量 i = 1;
    当 (i < arr.长度) {
        如果 (arr[i] > max) {
            max = arr[i];
        }
        i = i + 1;
    }
    返回 max;
}

// Linear search in array
// 数组线性搜索
函数 查找元素(arr: [整数], target: 整数): 整数 {
    变量 i = 0;
    当 (i < arr.长度) {
        如果 (arr[i] == target) {
            返回 i; // 返回索引
        }
        i = i + 1;
    }
    返回 -1; // 未找到
}

// Calculate array sum
// 计算数组总和
函数 数组求和(arr: [整数]): 整数 {
    变量 sum = 0;
    对于 (数字 in arr) {
        sum = sum + 数字;
    }
    返回 sum;
}

// ===== Conditional Functions | 条件函数示例 =====

// Grade classification
// 成绩等级分类
函数 成绩等级(score: 整数): 字符串 {
    如果 (score >= 90) {
        返回 "优秀";
    } 否则如果 (score >= 80) {
        返回 "良好";
    } 否则如果 (score >= 70) {
        返回 "中等";
    } 否则如果 (score >= 60) {
        返回 "及格";
    } 否则 {
        返回 "不及格";
    }
}

// Tax calculation
// 税收计算
函数 计算税金(income: 整数): 整数 {
    如果 (income <= 5000) {
        返回 0;
    } 否则如果 (income <= 10000) {
        返回 (income - 5000) * 5 / 100;
    } 否则如果 (income <= 20000) {
        返回 250 + (income - 10000) * 10 / 100;
    } 否则 {
        返回 1250 + (income - 20000) * 20 / 100;
    }
}

// ===== Advanced Function Examples | 高级函数示例 =====

// Function with multiple return points
// 多返回点函数
函数 登录检查(username: 字符串, password: 字符串): 整数 {
    如果 (username == "") {
        返回 1; // 用户名空
    }
    如果 (password == "") {
        返回 2; // 密码空
    }
    如果 (字符串长度(password) < 6) {
        返回 3; // 密码太短
    }
    // 实际中这里会有真实的验证逻辑
    如果 (username == "admin" 且 password == "password123") {
        返回 0; // 成功
    }
    返回 4; // 用户名或密码错误
}

// Function with complex calculations
// 复杂计算函数
函数 计算贷款本金(principal: 整数, rate: 整数, years: 整数): 整数 {
    变量 monthly_rate = rate / 12 / 100;
    变量 months = years * 12;

    如果 (monthly_rate == 0) {
        返回 principal / months;
    }

    // 简化的月供计算
    变量 denominator = 1 - 幂(1 + monthly_rate, -months);
    变量 monthly_payment = principal * monthly_rate / denominator;

    返回 月供金额;
}

// Function demonstrating parameter validation
// 参数验证演示函数
函数 安全除法(a: 整数, b: 整数): 整数 {
    如果 (b == 0) {
        打印 "错误：除数不能为零";
        返回 0; // 或者可以返回错误码
    }
    返回 a / b;
}

// ===== Main execution | 主执行部分 =====

// Main function to demonstrate all examples
// 主函数：演示所有示例
函数 主函数() {
    打印 "=== Qi语言函数示例 ===";

    // Basic function calls
    打印 "\n1. 基础函数调用：";
    打印问候();

    变量 sum = 计算和(10, 25);
    打印 "10 + 25 = " + 转字符串(sum);

    变量 info = 创建个人信息("张三", 20, 真);
    打印 info;

    显示结果("基础函数演示完成");

    // Mathematical function calls
    打印 "\n2. 数学函数调用：";
    变量 fact = 阶乘(5);
    打印 "5! = " + 转字符串(fact);

    变量 power = 幂(2, 8);
    打印 "2^8 = " + 转字符串(power);

    变量 abs = 绝对值(-42);
    打印 "|-42| = " + 转字符串(abs);

    变量 max = 最大值(15, 27);
    打印 "max(15, 27) = " + 转字符串(max);

    // String function calls
    打印 "\n3. 字符串函数调用：";
    变量 text = "Hello World";
    变量 len = 字符串长度(text);
    打印 "字符串长度: " + 转字符串(len);

    变量 reversed = 反转字符串(text);
    打印 "反转后: " + reversed;

    变量 contains = 包含子串(text, "World");
    打印 "是否包含 'World': " + 如果(contains, "是", "否");

    // Array function calls
    打印 "\n4. 数组函数调用：";
    变量 numbers = [5, 2, 8, 1, 9, 3];
    变量 max_val = 数组最大值(numbers);
    打印 "数组最大值: " + 转字符串(max_val);

    变量 index = 查找元素(numbers, 8);
    打印 "元素8的索引: " + 转字符串(index);

    变量 array_sum = 数组求和(numbers);
    打印 "数组总和: " + 转字符串(array_sum);

    // Conditional function calls
    打印 "\n5. 条件函数调用：";
    变量 grade = 成绩等级(85);
    打印 "成绩85的等级: " + grade;

    变量 tax = 计算税金(15000);
    打印 "收入15000的税金: " + 转字符串(tax);

    // Advanced function calls
    打印 "\n6. 高级函数调用：";
    变量 login_result = 登录检查("admin", "password123");
    打印 "登录结果: " + 转字符串(login_result);

    变量 payment = 计算贷款本金(100000, 5, 30);
    打印 "贷款月供: " + 转字符串(payment);

    变quotient = 安全除法(20, 4);
    打印 "20/4 = " + 转字符串(quotient);

    变quotient = 安全除法(20, 0); // 这会显示错误消息

    打印 "\n=== 函数示例演示完成 ===";
}

// Execute the main function
// 执行主函数
主函数();