// 异步并发示例 - 展示 Qi 语言的 M:N 协程调度

包 异步示例;

导入 标准库.输入输出;
导入 标准库.任务;
导入 标准库.时间;

// 异步函数：模拟网络请求
异步 函数 字符串 获取数据(整数 任务ID, 整数 延迟毫秒) {
    打印("[任务 {}] 开始获取数据...", 任务ID);
    
    // 模拟异步等待 (非阻塞)
    等待 时间.异步休眠(延迟毫秒);
    
    打印("[任务 {}] 数据获取完成", 任务ID);
    返回 "数据-" + 任务ID.转字符串();
}

// 异步函数：处理数据
异步 函数 空 处理数据(整数 任务ID) {
    打印("[处理器 {}] 启动", 任务ID);
    
    变量 数据 = 等待 获取数据(任务ID, 500);
    打印("[处理器 {}] 收到数据: {}", 任务ID, 数据);
    
    // 模拟数据处理
    等待 时间.异步休眠(200);
    
    打印("[处理器 {}] 数据处理完成", 任务ID);
}

// 普通函数：后台工作任务
函数 空 后台任务(整数 任务ID, 整数 循环次数) {
    打印("[后台任务 {}] 启动", 任务ID);
    
    变量 i = 0;
    当 i < 循环次数 {
        打印("[后台任务 {}] 正在运行... 第 {} 次", 任务ID, i + 1);
        
        // 让出 CPU，允许其他任务运行
        时间.休眠(300);
        
        i = i + 1;
    }
    
    打印("[后台任务 {}] 完成", 任务ID);
}

// 主程序：演示并发和异步
函数 整数 主程序入口() {
    打印("=== Qi 语言异步并发示例 ===");
    打印("演示 M:N 协程调度和异步 I/O");
    打印("");
    
    // 示例 1: 启动多个异步任务
    打印("--- 示例 1: 并发执行异步任务 ---");
    
    启动 异步 {
        等待 处理数据(1);
    };
    
    启动 异步 {
        等待 处理数据(2);
    };
    
    启动 异步 {
        等待 处理数据(3);
    };
    
    // 等待异步任务完成
    时间.休眠(1500);
    打印("");
    
    // 示例 2: 启动普通后台任务 (协程)
    打印("--- 示例 2: 启动轻量级协程 ---");
    
    启动 后台任务(101, 3);
    启动 后台任务(102, 3);
    
    // 主线程继续执行
    打印("[主线程] 主线程继续执行其他工作...");
    时间.休眠(500);
    打印("[主线程] 主线程工作完成，等待所有任务结束...");
    
    // 等待所有任务完成
    时间.休眠(1500);
    
    打印("");
    打印("=== 所有任务完成 ===");
    
    返回 0;
}
