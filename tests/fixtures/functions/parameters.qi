// 参数传递测试 | Parameter Passing Tests
// 测试函数参数的各种情况 | Testing various function parameter scenarios

// 测试1: 基本参数传递 | Test 1: Basic parameter passing
函数 打印数字(num: 整数) {
    打印 num;
}

// 测试2: 多个参数 | Test 2: Multiple parameters
函数 相加(a: 整数, b: 整数) : 整数 {
    返回 a + b;
}

// 测试3: 不同类型参数 | Test 3: Different type parameters
函数 连接文本(前缀: 字符串, 数字: 整数, 后缀: 字符串) : 字符串 {
    返回 前缀 + 数字 + 后缀;
}

// 测试4: 布尔参数 | Test 4: Boolean parameters
函数 选择选项(条件: 布尔, 选项1: 字符串, 选项2: 字符串) : 字符串 {
    如果 (条件) {
        返回 选项1;
    } 否则 {
        返回 选项2;
    }
}

// 测试5: 浮点数参数 | Test 5: Float parameters
函数 计算平均值(x: 浮点数, y: 浮点数) : 浮点数 {
    返回 (x + y) / 2.0;
}

// 测试6: 字符参数 | Test 6: Character parameters
函数 创建重复字符(字符: 字符, 次数: 整数) : 字符串 {
    变量 结果 = "";
    变量 i = 0;
    当 (i < 次数) {
        结果 = 结果 + 字符;
        i = i + 1;
    }
    返回 结果;
}

// 测试7: 参数在表达式中使用 | Test 7: Parameters used in expressions
函数 计算矩形面积(宽度: 整数, 高度: 整数) : 整数 {
    变量 面积 = 宽度 * 高度;
    返回 面积;
}

// 测试8: 参数作为函数调用参数 | Test 8: Parameters as function call arguments
函数 间接计算(基础值: 整数, 倍数: 整数) : 整数 {
    返回 相加(基础值, 基础值 * 倍数);
}

// 测试9: 参数重新赋值 | Test 9: Parameter reassignment
函数 修改参数(值: 整数) : 整数 {
    值 = 值 * 2;
    返回 值 + 10;
}

// 测试10: 无类型注解参数 | Test 10: Parameters without type annotation
函数 灵活参数(x, y) {
    返回 x + y;
}

// 测试11: 混合有类型和无类型参数 | Test 11: Mixed typed and untyped parameters
函数 混合参数(有类型: 整数, 无类型) : 整数 {
    返回 有类型 + 无类型;
}

// 测试12: 参数在条件中使用 | Test 12: Parameters in conditions
函数 检查范围(值: 整数, 最小: 整数, 最大: 整数) : 布尔 {
    返回 (值 >= 最小) 且 (值 <= 最大);
}

// 测试13: 参数在循环中使用 | Test 13: Parameters in loops
函数 计数到目标(目标: 整数) : 整数 {
    变量 总和 = 0;
    对于 (i = 1; i <= 目标; i = i + 1) {
        总和 = 总和 + i;
    }
    返回 总和;
}

// 测试14: 数组参数 | Test 14: Array parameters
函数 数组求和(arr: 数组<整数>) : 整数 {
    变量 sum = 0;
    变量 i = 0;
    当 (i < 5) {  // 假设数组长度为5
        sum = sum + arr[i];
        i = i + 1;
    }
    返回 sum;
}

函数 数组最大值(arr: 数组<整数>) : 整数 {
    变量 max = arr[0];
    变量 i = 1;
    当 (i < 5) {
        如果 (arr[i] > max) {
            max = arr[i];
        }
        i = i + 1;
    }
    返回 max;
}

// 测试15: 参数验证 | Test 15: Parameter validation
函数 安全除法(a: 整数, b: 整数) : 整数 {
    如果 (b == 0) {
        打印 "错误：除零错误！";
        返回 0;
    }
    返回 a / b;
}

函数 检查正数(n: 整数) : 布尔 {
    返回 n > 0;
}

// 测试16: 嵌套函数调用中的参数 | Test 16: Parameters in nested function calls
函数 复杂计算(x: 整数, y: 整数, z: 整数) : 整数 {
    变量 step1 = 相加(x, y);
    变量 step2 = 计算矩形面积(step1, z);
    返回 step2;
}

// 测试17: 参数的默认值概念 | Test 17: Default parameter value concept
// 这个测试取决于语言是否支持默认参数
// 函数 带默认值的问候(name: 字符串 = "世界") : 字符串 {
//     返回 "你好，" + name + "！";
// }

// 测试18: 参数的作用域测试 | Test 18: Parameter scope test
函数 参数作用域测试(param: 整数) : 整数 {
    变量 local_var = param * 2;
    {
        变量 inner_var = param + local_var;
        local_var = inner_var;
    }
    返回 local_var;
}

// 测试19: 参数的类型推断 | Test 19: Parameter type inference
函数 类型推断测试(x, y) {
    // 如果x和y是整数，执行整数运算
    // 如果x和y是字符串，执行字符串连接
    返回 x + y;
}

// 测试20: 参数的内存管理概念 | Test 20: Parameter memory management concept
函数 大型数据处理(data: 数组<整数>) : 整数 {
    // 测试传递大型数据时的性能
    变量 result = 0;
    变量 i = 0;
    当 (i < 100) {
        result = result + data[i % 5];  // 使用模运算避免越界
        i = i + 1;
    }
    返回 result;
}

// 主测试函数 | Main test function
函数 main() : 整数 {
    打印 "=== 参数传递测试开始 | Parameter Passing Tests Start ===";

    // 基本参数测试
    打印数字(42);
    打印 "相加结果: " + 相加(5, 3);
    打印 "连接文本: " + 连接文本("值: ", 100, " 元");
    打印 "选择选项: " + 选择选项(真, "是", "否");
    打印 "计算平均值: " + 计算平均值(3.5, 7.5);
    打印 "重复字符: " + 创建重复字符("A", 5);
    打印 "矩形面积: " + 计算矩形面积(4, 6);
    打印 "间接计算: " + 间接计算(10, 3);
    打印 "修改参数: " + 修改参数(15);
    打印 "灵活参数: " + 灵活参数(10, 20);
    打印 "混合参数: " + 混合参数(100, 50);
    打印 "检查范围: " + 检查范围(25, 10, 50);
    打印 "计数到目标: " + 计数到目标(10);

    // 数组参数测试
    变量 test_array = [1, 2, 3, 4, 5];
    打印 "数组求和: " + 数组求和(test_array);
    打印 "数组最大值: " + 数组最大值(test_array);

    // 参数验证测试
    打印 "安全除法: " + 安全除法(20, 4);
    打印 "安全除法(零): " + 安全除法(20, 0);
    打印 "检查正数: " + 检查正数(-5);

    // 复杂计算测试
    打印 "复杂计算: " + 复杂计算(2, 3, 4);

    // 作用域测试
    打印 "参数作用域测试: " + 参数作用域测试(10);

    // 类型推断测试
    打印 "类型推断(整数): " + 类型推断测试(5, 3);
    打印 "类型推断(字符串): " + 类型推断测试("Hello", " World");

    // 大型数据测试
    打印 "大型数据处理: " + 大型数据处理(test_array);

    打印 "=== 参数传递测试完成 | Parameter Passing Tests Complete ===";
    返回 0;
}
