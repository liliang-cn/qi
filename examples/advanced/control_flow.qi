// 控制流示例 | Control Flow Examples
// 演示 Qi 语言中的各种控制流结构 | Demonstrating various control flow structures in Qi language

// 示例1: 基本如果语句 | Example 1: Basic If Statement
函数 判断数字(n) {
    如果 (n > 0) {
        返回 "正数";
    } 否则 如果 (n < 0) {
        返回 "负数";
    } 否则 {
        返回 "零";
    }
}

// 示例2: 嵌套如果语句 | Example 2: Nested If Statements
函数 评级系统(分数) {
    如果 (分数 >= 90) {
        如果 (分数 == 100) {
            返回 "完美";
        } 否则 {
            返回 "优秀";
        }
    } 否则 如果 (分数 >= 80) {
        返回 "良好";
    } 否则 如果 (分数 >= 60) {
        返回 "及格";
    } 否则 {
        返回 "不及格";
    }
}

// 示例3: 当循环示例 | Example 3: While Loop Example
函数 倒计时(起始) {
    变量 当前 = 起始;
    变量 结果 = "倒计时: ";

    当 (当前 > 0) {
        结果 = 结果 + 转换字符串(当前) + " ";
        当前 = 当前 - 1;
    }

    结果 = 结果 + "发射!";
    返回 结果;
}

// 示例4: 对于循环示例 | Example 4: For Loop Example
function 计算1到n的和(n) {
    变量 总和 = 0;

    对于 (i = 1; i <= n; i = i + 1) {
        总和 = 总和 + i;
    }

    返回 总和;
}

// 示例5: 嵌套循环 | Example 5: Nested Loops
函数 乘法表(大小) {
    变量 结果 = "";

    对于 (行 = 1; 行 <= 大小; 行 = 行 + 1) {
        对于 (列 = 1; 列 <= 大小; 列 = 列 + 1) {
            变量 乘积 = 行 * 列;
            结果 = 结果 + 转换字符串(乘积) + " ";
        }
        结果 = 结果 + "\n";
    }

    返回 结果;
}

// 示例6: 复杂条件判断 | Example 6: Complex Condition
function 判断闰年(年份) {
    变量 能被4整除 = (年份 % 4 == 0);
    变量 能被100整除 = (年份 % 100 == 0);
    变量 能被400整除 = (年份 % 400 == 0);

    如果 (能被4整除 与 非 能被100整除) {
        返回 真;
    } 否则 如果 (能被100整除 与 能被400整除) {
        返回 真;
    } 否则 {
        返回 假;
    }
}

// 示例7: 循环中的条件判断 | Example 7: Conditional Logic in Loop
函数 找出第一个偶数(数字列表) {
    变量 索引 = 0;
    变量 长度 = 获取数组长度(数字列表);

    当 (索引 < 长度) {
        变量 当前数字 = 数字列表[索引];

        如果 (当前数字 % 2 == 0) {
            返回 当前数字;
        }

        索引 = 索引 + 1;
    }

    返回 -1; // 没有找到偶数
}

// 示例8: 使用循环构建模式 | Example 8: Pattern Building with Loop
函数 构建三角形(高度) {
    变量 结果 = "";
    变量 当前行 = 1;

    当 (当前行 <= 高度) {
        变量 空格数 = 高度 - 当前行;
        变量 星星数 = 当前行 * 2 - 1;

        // 添加空格
        对于 (i = 0; i < 空格数; i = i + 1) {
            结果 = 结果 + " ";
        }

        // 添加星星
        对于 (j = 0; j < 星星数; j = j + 1) {
            结果 = 结果 + "*";
        }

        结果 = 结果 + "\n";
        当前行 = 当前行 + 1;
    }

    返回 结果;
}

// 示例9: 输入验证循环 | Example 9: Input Validation Loop
function 获取有效输入() {
    变量 输入 = "";
    变量 有效 = 假;

    当 (非 有效) {
        输入 = 读取用户输入("请输入一个正数: ");

        如果 (是数字(输入) 与 转换数字(输入) > 0) {
            有效 = 真;
        } 否则 {
            显示消息("无效输入，请重试。");
        }
    }

    返回 转换数字(输入);
}

// 示例10: 状态机示例 | Example 10: State Machine Example
function 处理订单状态(订单) {
    变量 状态 = 订单.状态;

    当 (状态 != "已完成" 与 状态 != "已取消") {
        如果 (状态 == "待处理") {
            处理支付(订单);
            状态 = "支付中";
        } 否则 如果 (状态 == "支付中") {
            验证支付(订单);
            状态 = "已支付";
        } 否则 如果 (状态 == "已支付") {
            准备发货(订单);
            状态 = "发货中";
        } 否则 如果 (状态 == "发货中") {
            确认收货(订单);
            状态 = "已完成";
        }
    }

    返回 状态;
}

// 主函数 | Main Function
函数 主() {
    // 测试各种控制流结构
    显示消息("数字 5 是: " + 判断数字(5));
    显示消息("数字 -3 是: " + 判断数字(-3));
    显示消息("分数 85 的评级: " + 评级系统(85));
    显示消息("倒计时: " + 倒计时(3));
    显示消息("1到10的和: " + 计算1到n的和(10));
    显示消息("乘法表:\n" + 乘法表(5));
    显示消息("2024年是闰年吗: " + 判断闰年(2024));
    显示消息("三角形图案:\n" + 构建三角形(5));
}