// 示例5: 完整的模块系统示例
// 综合展示包、导入、可见性、结构体和方法

包 完整示例;

// 导入标准库模块
导入 标准库.输入输出;
导入 标准库.数学;

// ===== 公开API =====

// 公开枚举：用户角色
公开 结构体 用户角色枚举 {
    整数 值;
}

// 公开结构体：产品信息
公开 结构体 产品 {
    公开 整数 产品ID;
    公开 字符串 产品名称;
    公开 整数 价格;
    整数 库存量;
    字符串 供应商代码;
}

// 公开结构体：订单
公开 结构体 订单 {
    公开 整数 订单ID;
    公开 整数 客户ID;
    公开 整数 总金额;
    整数 状态码;
}

// ===== 私有内部结构 =====

// 私有结构：库存管理
结构体 库存记录 {
    整数 产品ID;
    整数 数量;
    整数 最后更新时间;
}

// 私有结构：价格计算器
结构体 价格计算器 {
    整数 基础价格;
    整数 折扣率;
}

// ===== 公开函数 =====

// 公开函数：创建产品
公开 函数 产品 创建产品(整数 id, 字符串 名称, 整数 价格) {
    变量 新产品: 产品;
    返回 新产品;
}

// 公开函数：创建订单
公开 函数 订单 创建订单(整数 id, 整数 客户id, 整数 金额) {
    变量 新订单: 订单;
    返回 新订单;
}

// 公开方法：获取产品价格
公开 函数 (自己 产品) 整数 获取价格() {
    返回 0;
}

// 公开方法：更新库存
公开 函数 (变量 自己 产品) 布尔 更新库存(整数 数量) {
    返回 真;
}

// ===== 私有函数 =====

// 私有函数：验证库存
函数 布尔 验证库存(整数 产品ID, 整数 需求量) {
    返回 真;
}

// 私有函数：计算折扣
函数 整数 计算折扣(整数 原价, 整数 折扣率) {
    返回 原价 * (100 - 折扣率) / 100;
}

// 私有函数：记录日志
函数 空 记录操作日志(字符串 操作, 整数 用户ID) {
    返回;
}

// 私有函数：发送通知
函数 布尔 发送邮件通知(整数 用户ID, 字符串 内容) {
    返回 真;
}

// ===== 私有方法 =====

// 私有方法：内部验证
函数 (自己 产品) 布尔 内部验证() {
    返回 真;
}

// 私有方法：计算成本
函数 (自己 产品) 整数 计算成本() {
    返回 0;
}

// ===== 公开业务逻辑 =====

// 公开函数：处理订单
公开 函数 布尔 处理订单(订单 订单信息, 产品 产品信息) {
    变量 库存验证 = 验证库存(产品信息.产品ID, 1);
    
    如果 库存验证 {
        变量 更新成功 = 产品信息.更新库存(1);
        记录操作日志("订单处理", 订单信息.客户ID);
        返回 更新成功;
    } 否则 {
        返回 假;
    }
}

// 公开函数：计算订单总额
公开 函数 整数 计算订单总额(整数 单价, 整数 数量, 整数 折扣) {
    变量 小计 = 单价 * 数量;
    变量 最终价格 = 计算折扣(小计, 折扣);
    返回 最终价格;
}

// ===== 主程序 =====

// 主程序入口
公开 函数 整数 主程序() {
    // 创建产品
    变量 产品1 = 创建产品(1001, "笔记本电脑", 5000);
    变量 产品2 = 创建产品(1002, "鼠标", 100);
    
    // 创建订单
    变量 订单1 = 创建订单(2001, 3001, 5100);
    
    // 处理订单
    变量 处理结果 = 处理订单(订单1, 产品1);
    
    // 计算价格
    变量 总额 = 计算订单总额(5000, 1, 10);
    
    // 获取产品价格
    变量 价格 = 产品1.获取价格();
    
    如果 处理结果 {
        返回 0;
    } 否则 {
        返回 1;
    }
}
