// 结构体和枚举示例 - 展示 Qi 语言的数据结构定义

包 数据结构示例;

导入 标准库.输入输出;

// 定义用户结构体
结构体 用户 {
    整数 ID;
    字符串 姓名;
    整数 年龄;
    字符串 邮箱;
}

// 定义地址结构体
结构体 地址 {
    字符串 国家;
    字符串 省份;
    字符串 城市;
    字符串 街道;
    整数 邮编;
}

// 定义完整用户信息（嵌套结构体）
结构体 完整用户信息 {
    用户 基本信息;
    地址 联系地址;
    布尔 已验证;
}

// 定义操作结果枚举
枚举 结果<T, E> {
    成功(T),
    失败(E)
}

// 定义用户状态枚举
枚举 用户状态 {
    活跃,
    休眠,
    已注销
}

// 定义错误类型枚举
枚举 错误类型 {
    未找到(字符串 消息),
    权限不足(字符串 原因),
    网络错误(整数 错误码),
    未知错误
}

// 函数：创建用户
函数 用户 创建用户(整数 ID, 字符串 姓名, 整数 年龄, 字符串 邮箱) {
    变量 新用户: 用户;
    新用户.ID = ID;
    新用户.姓名 = 姓名;
    新用户.年龄 = 年龄;
    新用户.邮箱 = 邮箱;
    返回 新用户;
}

// 函数：创建地址
函数 地址 创建地址(字符串 国家, 字符串 省份, 字符串 城市, 字符串 街道, 整数 邮编) {
    变量 新地址: 地址;
    新地址.国家 = 国家;
    新地址.省份 = 省份;
    新地址.城市 = 城市;
    新地址.街道 = 街道;
    新地址.邮编 = 邮编;
    返回 新地址;
}

// 函数：打印用户信息
函数 空 打印用户(用户 用户信息) {
    打印("  用户 ID: {}", 用户信息.ID);
    打印("  姓名: {}", 用户信息.姓名);
    打印("  年龄: {}", 用户信息.年龄);
    打印("  邮箱: {}", 用户信息.邮箱);
}

// 函数：打印地址
函数 空 打印地址(地址 地址信息) {
    打印("  国家: {}", 地址信息.国家);
    打印("  省份: {}", 地址信息.省份);
    打印("  城市: {}", 地址信息.城市);
    打印("  街道: {}", 地址信息.街道);
    打印("  邮编: {}", 地址信息.邮编);
}

// 函数：验证用户年龄
函数 结果<布尔, 错误类型> 验证年龄(整数 年龄) {
    如果 年龄 < 0 {
        返回 结果::失败(错误类型::未找到("年龄不能为负数"));
    } 否则 如果 年龄 < 18 {
        返回 结果::失败(错误类型::权限不足("未满18岁"));
    } 否则 如果 年龄 > 150 {
        返回 结果::失败(错误类型::未知错误);
    } 否则 {
        返回 结果::成功(真);
    }
}

// 函数：获取用户状态描述
函数 字符串 状态描述(用户状态 状态) {
    匹配 状态 {
        用户状态::活跃 => {
            返回 "用户活跃";
        }
        用户状态::休眠 => {
            返回 "用户休眠中";
        }
        用户状态::已注销 => {
            返回 "用户已注销";
        }
    }
}

// 主程序
函数 整数 主程序入口() {
    打印("=== Qi 语言结构体和枚举示例 ===");
    打印("");
    
    // 1. 创建和使用结构体
    打印("1. 创建用户信息:");
    变量 用户1 = 创建用户(1001, "张三", 25, "zhangsan@example.com");
    打印用户(用户1);
    打印("");
    
    // 2. 创建嵌套结构体
    打印("2. 创建完整用户信息（包含地址）:");
    变量 地址1 = 创建地址("中国", "广东省", "深圳市", "科技园路", 518000);
    
    变量 完整信息: 完整用户信息;
    完整信息.基本信息 = 用户1;
    完整信息.联系地址 = 地址1;
    完整信息.已验证 = 真;
    
    打印("基本信息:");
    打印用户(完整信息.基本信息);
    打印("联系地址:");
    打印地址(完整信息.联系地址);
    打印("验证状态: {}", 完整信息.已验证);
    打印("");
    
    // 3. 使用枚举和模式匹配
    打印("3. 验证用户年龄（使用 Result 枚举）:");
    
    变量 年龄1 = 25;
    变量 验证结果1 = 验证年龄(年龄1);
    匹配 验证结果1 {
        结果::成功(有效) => {
            打印("  年龄 {} 验证成功", 年龄1);
        }
        结果::失败(错误) => {
            打印("  年龄 {} 验证失败", 年龄1);
        }
    }
    
    变量 年龄2 = 15;
    变量 验证结果2 = 验证年龄(年龄2);
    匹配 验证结果2 {
        结果::成功(有效) => {
            打印("  年龄 {} 验证成功", 年龄2);
        }
        结果::失败(错误) => {
            打印("  年龄 {} 验证失败: 权限不足", 年龄2);
        }
    }
    打印("");
    
    // 4. 使用用户状态枚举
    打印("4. 用户状态管理:");
    变量 状态1 = 用户状态::活跃;
    打印("  状态: {}", 状态描述(状态1));
    
    变量 状态2 = 用户状态::休眠;
    打印("  状态: {}", 状态描述(状态2));
    
    变量 状态3 = 用户状态::已注销;
    打印("  状态: {}", 状态描述(状态3));
    打印("");
    
    打印("=== 示例运行完成 ===");
    返回 0;
}
