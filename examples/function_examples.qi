// 函数示例程序 | Function Example Programs
// 展示Qi语言中函数的各种用法 | Demonstrating various function usages in Qi language

// ===== 基础函数示例 | Basic Function Examples =====

// 示例1: 简单加法函数 | Example 1: Simple addition function
函数 相加(a: 整数, b: 整数) : 整数 {
    返回 a + b;
}

// 示例2: 带条件判断的函数 | Example 2: Function with conditional logic
函数 绝对值(n: 整数) : 整数 {
    如果 (n < 0) {
        返回 -n;
    } 否则 {
        返回 n;
    }
}

// 示例3: 字符串处理函数 | Example 3: String processing function
函数 问候语(name: 字符串) : 字符串 {
    返回 "你好, " + name + "!";
}

// 示例4: 布尔函数 | Example 4: Boolean function
函数 是偶数(n: 整数) : 布尔 {
    返回 n % 2 == 0;
}

// ===== 数学函数示例 | Math Function Examples =====

// 示例5: 阶乘计算 | Example 5: Factorial calculation
函数 阶乘(n: 整数) : 整数 {
    如果 (n <= 1) {
        返回 1;
    } 否则 {
        返回 n * 阶乘(n - 1);
    }
}

// 示例6: 幂运算 | Example 6: Power operation
函数 幂(base: 整数, exp: 整数) : 整数 {
    如果 (exp <= 0) {
        返回 1;
    } 否则 如果 (exp == 1) {
        返回 base;
    } 否则 {
        返回 base * 幂(base, exp - 1);
    }
}

// 示例7: 斐波那契数列 | Example 7: Fibonacci sequence
函数 斐波那契(n: 整数) : 整数 {
    如果 (n <= 0) {
        返回 0;
    } 否则 如果 (n == 1) {
        返回 1;
    } 否则 {
        返回 斐波那契(n - 1) + 斐波那契(n - 2);
    }
}

// 示例8: 最大公约数 | Example 8: Greatest common divisor
函数 最大公约数(a: 整数, b: 整数) : 整数 {
    如果 (b == 0) {
        返回 a;
    } 否则 {
        返回 最大公约数(b, a % b);
    }
}

// ===== 实用工具函数 | Utility Functions =====

// 示例9: 数值范围检查 | Example 9: Number range check
函数 在范围内(value: 整数, min: 整数, max: 整数) : 布尔 {
    返回 (value >= min) 与 (value <= max);
}

// 示例10: 三数最大值 | Example 10: Maximum of three numbers
函数 三数最大(a: 整数, b: 整数, c: 整数) : 整数 {
    变量 max_ab = a;
    如果 (b > a) {
        max_ab = b;
    }

    如果 (c > max_ab) {
        返回 c;
    } 否则 {
        返回 max_ab;
    }
}

// 示例11: 数字反转 | Example 11: Number reversal
函数 反转数字(n: 整数) : 整数 {
    变量 reversed = 0;
    变量 num = n;

    当 (num != 0) {
        变量 digit = num % 10;
        reversed = reversed * 10 + digit;
        num = num / 10;
    }

    返回 reversed;
}

// 示例12: 素数检查 | Example 12: Prime number check
函数 是素数(n: 整数) : 布尔 {
    如果 (n <= 1) {
        返回 假;
    } 否则 如果 (n == 2) {
        返回 真;
    } 否则 如果 (n % 2 == 0) {
        返回 假;
    } 否则 {
        变量 i = 3;
        当 (i * i <= n) {
            如果 (n % i == 0) {
                返回 假;
            }
            i = i + 2;
        }
        返回 真;
    }
}

// ===== 复合函数示例 | Composite Function Examples =====

// 示例13: 复合计算 | Example 13: Composite calculation
函数 复合计算(x: 整数, y: 整数) : 整数 {
    变量 sum = 相加(x, y);
    变量 abs_sum = 绝对值(sum);
    变量 is_even = 是偶数(abs_sum);

    如果 (is_even) {
        返回 abs_sum / 2;
    } 否则 {
        返回 abs_sum * 2;
    }
}

// ===== 主函数演示 | Main Function Demonstration =====

函数 主() {
    // 基础函数演示
    打印 "=== 基础函数演示 ===";
    打印 "5 + 3 = " + 相加(5, 3);
    打印 "|-10| = " + 绝对值(-10);

    // 数学函数演示
    打印 "=== 数学函数演示 ===";
    打印 "5! = " + 阶乘(5);
    打印 "2^4 = " + 幂(2, 4);
    打印 "Fib(7) = " + 斐波那契(7);
    打印 "GCD(48, 18) = " + 最大公约数(48, 18);

    // 实用工具演示
    打印 "=== 实用工具演示 ===";
    打印 "Is 8 even? " + 是偶数(8);
    打印 "Is 15 in range [10, 20]? " + 在范围内(15, 10, 20);
    打印 "Max of (3, 7, 5) = " + 三数最大(3, 7, 5);
    打印 "Reverse of 123 = " + 反转数字(123);
    打印 "Is 17 prime? " + 是素数(17);

    // 复合函数演示
    打印 "=== 复合函数演示 ===";
    打印 "Composite calculation for (8, 3) = " + 复合计算(8, 3);

    返回 0;
}
