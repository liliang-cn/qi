// 复杂嵌套控制流结构示例 | Complex Nested Control Flow Examples
// 演示多层嵌套的条件判断和循环结构 | Demonstrating multi-level nested conditional and loop structures

// ===== 复杂嵌套示例 | Complex Nested Examples =====

// 示例1: 嵌套if-else在循环中 | Example 1: Nested if-else inside loops
函数 寻找数组中的极值(arr: 数组<整数>) {
    变量 max = arr[0];
    变量 min = arr[0];
    变量 max_index = 0;
    变量 min_index = 0;
    变量 i = 1;

    当 (i < 5) {  // 假设数组长度为5
        如果 (arr[i] > max) {
            max = arr[i];
            max_index = i;
            打印 "New maximum found at index " + i + ": " + max;
        } 否则 如果 (arr[i] < min) {
            min = arr[i];
            min_index = i;
            打印 "New minimum found at index " + i + ": " + min;
        } 否则 {
            打印 "Value at index " + i + " (" + arr[i] + ") is between current max and min";
        }
        i = i + 1;
    }

    打印 "Final max: " + max + " at index " + max_index;
    打印 "Final min: " + min + " at index " + min_index;
}

// 示例2: 三层嵌套循环 | Example 2: Three-level nested loops
函数 打印三维坐标(size: 整数) {
    变量 x = 0;
    当 (x < size) {
        变量 y = 0;
        当 (y < size) {
            变量 z = 0;
            当 (z < size) {
                如果 (x == 0) 且 (y == 0) 且 (z == 0) {
                    打印 "Origin: (" + x + ", " + y + ", " + z + ")";
                } 否则 如果 (x == size-1) 且 (y == size-1) 且 (z == size-1) {
                    打印 "Opposite corner: (" + x + ", " + y + ", " + z + ")";
                } 否则 如果 (x == y) 且 (y == z) {
                    打印 "Diagonal point: (" + x + ", " + y + ", " + z + ")";
                } 否则 {
                    打印 "Regular point: (" + x + ", " + y + ", " + z + ")";
                }
                z = z + 1;
            }
            y = y + 1;
        }
        x = x + 1;
    }
}

// 示例3: 在for循环中使用复杂的if-else链 | Example 3: Complex if-else chain in for loop
函数 学生成绩分类(scores: 数组<整数>) {
    对于 (i = 0; i < 5; i = i + 1) {  // 假设数组长度为5
        变量 score = scores[i];
        打印 "Student " + i + " score: " + score;

        如果 (score >= 95) {
            打印 "  Grade: A+ (Excellent)";
            如果 (score == 100) {
                打印 "  Perfect score! Outstanding achievement!";
            }
        } 否则 如果 (score >= 90) {
            打印 "  Grade: A (Very Good)";
        } 否则 如果 (score >= 85) {
            打印 "  Grade: B+ (Good)";
        } 否则 如果 (score >= 80) {
            打印 "  Grade: B (Above Average)";
            如果 (score >= 82) {
                打印 "  Close to B+! Keep working hard!";
            }
        } 否则 如果 (score >= 75) {
            打印 "  Grade: C+ (Average)";
        } 否则 如果 (score >= 70) {
            打印 "  Grade: C (Below Average)";
        } 否则 如果 (score >= 60) {
            打印 "  Grade: D (Pass)";
            如果 (score <= 62) {
                打印 "  Warning: Very close to failing!";
            }
        } 否则 {
            打印 "  Grade: F (Fail)";
            打印 "  Please seek academic support immediately.";
        }
        打印 "";  // 空行分隔
    }
}

// 示例4: 复杂的嵌套条件用于游戏逻辑 | Example 4: Complex nested conditions for game logic
函数 游戏战斗模拟(player_hp: 整数, enemy_hp: 整数, player_level: 整数, enemy_level: 整数) {
    打印 "=== Battle Start ===";
    打印 "Player HP: " + player_hp + ", Level: " + player_level;
    打印 "Enemy HP: " + enemy_hp + ", Level: " + enemy_level;

    变量 turn = 1;
    当 (player_hp > 0) 且 (enemy_hp > 0) {
        打印 "--- Turn " + turn + " ---";

        如果 (turn % 2 == 1) {  // Player's turn
            变量 damage = 10 + (player_level * 2);
            如果 (player_level > enemy_level + 2) {
                damage = damage * 2;  // Critical hit
                打印 "Player attacks with CRITICAL HIT for " + damage + " damage!";
            } 否则 如果 (player_level < enemy_level - 2) {
                damage = damage / 2;  // Weak attack
                打印 "Player attacks weakly for " + damage + " damage.";
            } 否则 {
                打印 "Player attacks for " + damage + " damage.";
            }
            enemy_hp = enemy_hp - damage;

            如果 (enemy_hp <= 0) {
                打印 "Enemy defeated!";
                如果 (turn <= 3) {
                    打印 "Quick victory! Bonus experience earned!";
                } 否则 {
                    打印 "Victory achieved after " + turn + " turns.";
                }
            } 否则 {
                打印 "Enemy HP remaining: " + enemy_hp;

                如果 (enemy_hp < 20) {
                    打印 "Enemy is critically wounded!";
                } 否则 如果 (enemy_hp < 50) {
                    打印 "Enemy is heavily damaged.";
                }
            }
        } 否则 {  // Enemy's turn
            变量 damage = 8 + (enemy_level * 1);
            如果 (enemy_level > player_level + 1) {
                damage = damage + 5;  // Strong attack
                打印 "Enemy attacks strongly for " + damage + " damage!";
            } 否则 {
                打印 "Enemy attacks for " + damage + " damage.";
            }
            player_hp = player_hp - damage;

            如果 (player_hp <= 0) {
                打印 "Player defeated!";
            } 否则 {
                打印 "Player HP remaining: " + player_hp;

                如果 (player_hp < 20) {
                    打印 "Player is critically wounded!";
                    如果 (turn > 5) {
                        打印 "Consider using a healing item!";
                    }
                } 否则 如果 (player_hp < 50) {
                    打印 "Player is injured.";
                }
            }
        }
        turn = turn + 1;

        如果 (turn > 20) {
            打印 "Battle timeout - draw!";
            跳出;  // 假设有break语句
        }
    }

    打印 "=== Battle End ===";
}

// 主函数 | Main Function
函数 主() {
    打印 "=== Complex Nested Control Flow Examples ===";
    打印 "=== 复杂嵌套控制流示例 ===";

    // 测试数组极值查找
    变量 numbers = [15, 3, 8, 23, 12];
    寻找数组中的极值(numbers);

    打印 "\n=== 3D Coordinates ===";
    打印三维坐标(2);

    打印 "\n=== Student Grade Classification ===";
    变量 scores = [98, 76, 82, 61, 100];
    学生成绩分类(scores);

    打印 "\n=== Battle Simulation ===";
    游戏战斗模拟(100, 80, 5, 3);

    打印 "\nAll complex nested examples completed!";
    打印 "所有复杂嵌套示例运行完成！";

    返回 0;
}